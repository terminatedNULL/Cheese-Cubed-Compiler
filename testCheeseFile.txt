set __CHEESETYPE__ { #Sets the value or call behavior of an object, an override
					 #__CHEESETYPE__ is the interal entry point of the program
					 #The "__CHEDDAR__" specifies that it is only replacing __CHEDDAR__
					 #You can also use "__ANYCHEESE__" to imply no specific target

	pasteurized wheel <cheddarOverride> : __CHEESETYPE__ {
		#This is now set as the entry point of the program
	}
} ( __CHEEDDAR__ )

opt_cheese_type wheel < __CHEDDAR__ > {
  word input = ""
  num<int> repeatVal = 3
  val<word, num, *> users = ["John", "Amy"] * [1, 2]

	gouda("Hello, World!") AND repeatVal { "\n" } #Print, return repeatVal (3) lines
	swiss {inputVar<word, *>} #User Input into a new variable with rotation
	word inputWord.(inputVar)


  eval { 
    num sto = 4
	} fail {
    check fail_case {	#Checks the value of an internal or program
			gouda "Cannot Add Values of Word and Num!" /r/
		} ( __type_op__ )
	}

	spill __CHEDDAR__ #Returns from function, sets internal __cheddar__ 
}

#*
() - denotes function call
{} - denotes enclosed code or variable usage (?)
[] - denotes indexed object
<> - denotes non-castable typing (similar to const)
// - denotes optional arguments
num<type, *> - A dynamically typeable number, assigns type on declaration. Specific type can be 
							assigned on declaration along with rotateable type, meaning its type is dynamically
    					castable to other number types using a rotation function. Upon rotation, a value will
							be returned corresponding to the distance rotated. The type can be accessed by assigning
							the returned value to a var<type>.
word<encoding, *> - A dynamically encodeable string, assigns encoding on declaration (default to UNICODE). 
char<Encoding, *> - 
bool<*> - 
val<type, *> - Cheese-specific variable type similar to an array, with rotation.

wheelReturnType wheel <wheelName> : inputObjects {
	wheelCodeGoesHere
}

set typeOfThingToSet {
	codeForThingBeingSet
} ( specificThingBeingSet )

get typeOfThingToGet {
	codeForThingBeingRetrieved
} ( specificThingBeingRetrieved )
*#